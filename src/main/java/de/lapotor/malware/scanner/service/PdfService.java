package de.lapotor.malware.scanner.service;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.List;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.io.RandomAccessReadBuffer;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class PdfService {

  @Value("${iban.blacklist}")
  private List<String> BLACKLISTED_IBANS;

  @Value("${domains.trusted}")
  private List<String> TRUSTED_DOMAINS;

  private static final int CONNECTION_TIMEOUT = 5000; // 5 seconds
  private static final int READ_TIMEOUT = 5000; // 5 seconds

  /**
   * Fetches the text from a PDF located at the given URL
   *
   * @param pdfUrl the URL of the PDF to fetch the text from
   * @return the text content of the PDF
   * @throws IOException if an I/O error occurs
   * @throws URISyntaxException if the URI is not formatted correctly
   */
  public String fetchPdfText(String pdfUrl) throws IOException, URISyntaxException {

    // Use more advanced URL validation to prevent SSRF attacks
    validateUrl(pdfUrl);

    URL url = new URI(pdfUrl).toURL();
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestMethod("GET");
    connection.setConnectTimeout(CONNECTION_TIMEOUT);
    connection.setReadTimeout(READ_TIMEOUT);
    connection.connect();

    try (InputStream inputStream = connection.getInputStream()) {
      PDDocument document =
          Loader.loadPDF(RandomAccessReadBuffer.createBufferFromStream(inputStream));
      PDFTextStripper pdfTextStripper = new PDFTextStripper();
      return pdfTextStripper.getText(document);
    }
  }

  /**
   * Checks if the given PDF text contains any blacklisted IBANs
   *
   * @param pdfText the text content of the PDF to check
   * @return true if the PDF text contains any blacklisted IBANs, false otherwise
   */
  public boolean containsBlacklistedIban(String pdfText) {
    // Remove all whitespaces from the PDF text to make it easier to compare
    String normalizedPdfText = pdfText.replaceAll("\\s+", "");

    for (String iban : BLACKLISTED_IBANS) {
      // Remove all whitespaces from the IBAN to make it easier to compare
      String normalizedIban = iban.replaceAll("\\s+", "");
      if (normalizedPdfText.contains(normalizedIban)) {
        return true;
      }
    }
    return false;
  }

  private void validateUrl(String url) throws URISyntaxException {
    if (TRUSTED_DOMAINS == null || TRUSTED_DOMAINS.isEmpty()) {
      // No trusted domains configured, so we trust all domains
      return;
    }

    URI uri = new URI(url);
    String host = uri.getHost();
    if (host == null || TRUSTED_DOMAINS.stream().noneMatch(host::endsWith)) {
      throw new URISyntaxException(url, "URL is not from a trusted domain");
    }
  }
}
