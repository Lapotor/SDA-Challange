/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.5.0-SNAPSHOT). https://openapi-generator.tech Do not edit the class manually.
 */
package de.lapotor.malware.scanner.api;

import de.lapotor.malware.scanner.model.CheckPostRequest;
import de.lapotor.malware.scanner.model.StateEnum;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    comments = "Generator version: 7.5.0-SNAPSHOT")
@Validated
@Tag(name = "Check", description = "the Check API")
public interface CheckApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /check : Check a pdf if it contains any blacklisted IBAN
   *
   * @param checkPostRequest Check a pdf determined by an url (optional)
   * @return Successful operation (status code 200) or Bad Request (status code 400) or Internal
   *     Server error (status code 500)
   */
  @Operation(
      operationId = "checkPost",
      summary = "Check a pdf if it contains any blacklisted IBAN",
      tags = {"Check"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = StateEnum.class))
            }),
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        @ApiResponse(responseCode = "500", description = "Internal Server error")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/check",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<StateEnum> checkPost(
      @Parameter(name = "CheckPostRequest", description = "Check an pdf determined by a url")
          @Valid
          @RequestBody(required = false)
          CheckPostRequest checkPostRequest) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString = "null";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
