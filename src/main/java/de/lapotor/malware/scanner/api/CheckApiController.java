package de.lapotor.malware.scanner.api;

import de.lapotor.malware.scanner.model.CheckPostRequest;
import de.lapotor.malware.scanner.model.StateEnum;
import de.lapotor.malware.scanner.service.PdfService;
import jakarta.annotation.Generated;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Optional;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    comments = "Generator version: 7.5.0-SNAPSHOT")
@Controller
@RequestMapping("${openapi.malwareScannerIBANCheck.base-path:/api/v1}")
public class CheckApiController implements CheckApi {

  private final NativeWebRequest request;
  private final PdfService pdfService;

  @Autowired
  public CheckApiController(NativeWebRequest request, PdfService pdfService) {
    this.request = request;
      this.pdfService = pdfService;
  }

  @Override
  public Optional<NativeWebRequest> getRequest() {
    return Optional.ofNullable(request);
  }

  @Override
  public ResponseEntity<StateEnum> checkPost(@Valid @RequestBody CheckPostRequest checkPostRequest) {
    if (checkPostRequest == null || checkPostRequest.getUrl() == null) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }

    try {
        String pdfText = pdfService.fetchPdfText(checkPostRequest.getUrl());
        if (pdfService.containsBlacklistedIban(pdfText)) {
            return new ResponseEntity<>(StateEnum.SUSPICIOUS, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(StateEnum.OK, HttpStatus.OK);
        }
    } catch (IOException | URISyntaxException e) {
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
}
